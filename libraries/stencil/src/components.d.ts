/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface ComponentWithChildren {}
  interface ComponentWithChildrenRerender {
    'count': number;
  }
  interface ComponentWithDeclarativeEvent {
    'camelHandled': boolean;
    'capsHandled': boolean;
    'kebabHandled': boolean;
    'lowercaseHandled': boolean;
    'pascalHandled': boolean;
  }
  interface ComponentWithDifferentViews {
    'showWC': boolean;
    'toggle': () => Promise<void>;
  }
  interface ComponentWithImperativeEvent {
    'eventHandled': boolean;
  }
  interface ComponentWithProperties {
    'arr': string[];
    'bool': boolean;
    'num': number;
    'obj': { org: string; repo: string; };
    'str': string;
  }
  interface ComponentWithoutChildren {}
}

declare global {


  interface HTMLComponentWithChildrenElement extends Components.ComponentWithChildren, HTMLStencilElement {}
  var HTMLComponentWithChildrenElement: {
    prototype: HTMLComponentWithChildrenElement;
    new (): HTMLComponentWithChildrenElement;
  };

  interface HTMLComponentWithChildrenRerenderElement extends Components.ComponentWithChildrenRerender, HTMLStencilElement {}
  var HTMLComponentWithChildrenRerenderElement: {
    prototype: HTMLComponentWithChildrenRerenderElement;
    new (): HTMLComponentWithChildrenRerenderElement;
  };

  interface HTMLComponentWithDeclarativeEventElement extends Components.ComponentWithDeclarativeEvent, HTMLStencilElement {}
  var HTMLComponentWithDeclarativeEventElement: {
    prototype: HTMLComponentWithDeclarativeEventElement;
    new (): HTMLComponentWithDeclarativeEventElement;
  };

  interface HTMLComponentWithDifferentViewsElement extends Components.ComponentWithDifferentViews, HTMLStencilElement {}
  var HTMLComponentWithDifferentViewsElement: {
    prototype: HTMLComponentWithDifferentViewsElement;
    new (): HTMLComponentWithDifferentViewsElement;
  };

  interface HTMLComponentWithImperativeEventElement extends Components.ComponentWithImperativeEvent, HTMLStencilElement {}
  var HTMLComponentWithImperativeEventElement: {
    prototype: HTMLComponentWithImperativeEventElement;
    new (): HTMLComponentWithImperativeEventElement;
  };

  interface HTMLComponentWithPropertiesElement extends Components.ComponentWithProperties, HTMLStencilElement {}
  var HTMLComponentWithPropertiesElement: {
    prototype: HTMLComponentWithPropertiesElement;
    new (): HTMLComponentWithPropertiesElement;
  };

  interface HTMLComponentWithoutChildrenElement extends Components.ComponentWithoutChildren, HTMLStencilElement {}
  var HTMLComponentWithoutChildrenElement: {
    prototype: HTMLComponentWithoutChildrenElement;
    new (): HTMLComponentWithoutChildrenElement;
  };
  interface HTMLElementTagNameMap {
    'component-with-children': HTMLComponentWithChildrenElement;
    'component-with-children-rerender': HTMLComponentWithChildrenRerenderElement;
    'component-with-declarative-event': HTMLComponentWithDeclarativeEventElement;
    'component-with-different-views': HTMLComponentWithDifferentViewsElement;
    'component-with-imperative-event': HTMLComponentWithImperativeEventElement;
    'component-with-properties': HTMLComponentWithPropertiesElement;
    'component-without-children': HTMLComponentWithoutChildrenElement;
  }
}

declare namespace LocalJSX {
  interface ComponentWithChildren extends JSXBase.HTMLAttributes<HTMLComponentWithChildrenElement> {}
  interface ComponentWithChildrenRerender extends JSXBase.HTMLAttributes<HTMLComponentWithChildrenRerenderElement> {
    'count'?: number;
  }
  interface ComponentWithDeclarativeEvent extends JSXBase.HTMLAttributes<HTMLComponentWithDeclarativeEventElement> {
    'camelHandled'?: boolean;
    'capsHandled'?: boolean;
    'kebabHandled'?: boolean;
    'lowercaseHandled'?: boolean;
    'pascalHandled'?: boolean;
  }
  interface ComponentWithDifferentViews extends JSXBase.HTMLAttributes<HTMLComponentWithDifferentViewsElement> {
    'showWC'?: boolean;
  }
  interface ComponentWithImperativeEvent extends JSXBase.HTMLAttributes<HTMLComponentWithImperativeEventElement> {
    'eventHandled'?: boolean;
  }
  interface ComponentWithProperties extends JSXBase.HTMLAttributes<HTMLComponentWithPropertiesElement> {
    'arr'?: string[];
    'bool'?: boolean;
    'num'?: number;
    'obj'?: { org: string; repo: string; };
    'str'?: string;
  }
  interface ComponentWithoutChildren extends JSXBase.HTMLAttributes<HTMLComponentWithoutChildrenElement> {}

  interface IntrinsicElements {
    'component-with-children': ComponentWithChildren;
    'component-with-children-rerender': ComponentWithChildrenRerender;
    'component-with-declarative-event': ComponentWithDeclarativeEvent;
    'component-with-different-views': ComponentWithDifferentViews;
    'component-with-imperative-event': ComponentWithImperativeEvent;
    'component-with-properties': ComponentWithProperties;
    'component-without-children': ComponentWithoutChildren;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


